// Copyright (c) 2015, the Dart GL extension authors. All rights reserved.
// Please see the AUTHORS file for details. Use of this source code is governed
// by a BSD-style license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file is auto-generated by scripts in the tools/ directory.
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "GLES2/gl2.h"
#include "dart_api.h"

#include "../util.h"
#include "gl_bindings.h"

// Generated GL function bindings for Dart.

void glActiveTexture_native(Dart_NativeArguments arguments) {
  Dart_Handle texture_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t texture = 0;
  if (Dart_IsInteger(texture_obj)) {
    HandleError(Dart_IntegerToInt64(texture_obj, &texture));
  }

  glActiveTexture(texture);
}

void glAttachShader_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  Dart_Handle shader_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t shader = 0;
  if (Dart_IsInteger(shader_obj)) {
    HandleError(Dart_IntegerToInt64(shader_obj, &shader));
  }

  glAttachShader(program, shader);
}

void glBindAttribLocation_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle name_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  const char* name = NULL;
  if (Dart_IsString(name_obj)) {
    HandleError(Dart_StringToCString(name_obj, &name));
  }

  glBindAttribLocation(program, index, name);
}

void glBindBuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle buffer_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t buffer = 0;
  if (Dart_IsInteger(buffer_obj)) {
    HandleError(Dart_IntegerToInt64(buffer_obj, &buffer));
  }

  glBindBuffer(target, buffer);
}

void glBindFramebuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle framebuffer_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t framebuffer = 0;
  if (Dart_IsInteger(framebuffer_obj)) {
    HandleError(Dart_IntegerToInt64(framebuffer_obj, &framebuffer));
  }

  glBindFramebuffer(target, framebuffer);
}

void glBindRenderbuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle renderbuffer_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t renderbuffer = 0;
  if (Dart_IsInteger(renderbuffer_obj)) {
    HandleError(Dart_IntegerToInt64(renderbuffer_obj, &renderbuffer));
  }

  glBindRenderbuffer(target, renderbuffer);
}

void glBindTexture_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle texture_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t texture = 0;
  if (Dart_IsInteger(texture_obj)) {
    HandleError(Dart_IntegerToInt64(texture_obj, &texture));
  }

  glBindTexture(target, texture);
}

void glBlendColor_native(Dart_NativeArguments arguments) {
  Dart_Handle red_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double red = 0.0;
  if (Dart_IsDouble(red_obj)) {
    HandleError(Dart_DoubleValue(red_obj, &red));
  }

  Dart_Handle green_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double green = 0.0;
  if (Dart_IsDouble(green_obj)) {
    HandleError(Dart_DoubleValue(green_obj, &green));
  }

  Dart_Handle blue_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double blue = 0.0;
  if (Dart_IsDouble(blue_obj)) {
    HandleError(Dart_DoubleValue(blue_obj, &blue));
  }

  Dart_Handle alpha_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double alpha = 0.0;
  if (Dart_IsDouble(alpha_obj)) {
    HandleError(Dart_DoubleValue(alpha_obj, &alpha));
  }

  glBlendColor(red, green, blue, alpha);
}

void glBlendEquation_native(Dart_NativeArguments arguments) {
  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  glBlendEquation(mode);
}

void glBlendEquationSeparate_native(Dart_NativeArguments arguments) {
  Dart_Handle modeRGB_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t modeRGB = 0;
  if (Dart_IsInteger(modeRGB_obj)) {
    HandleError(Dart_IntegerToInt64(modeRGB_obj, &modeRGB));
  }

  Dart_Handle modeAlpha_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t modeAlpha = 0;
  if (Dart_IsInteger(modeAlpha_obj)) {
    HandleError(Dart_IntegerToInt64(modeAlpha_obj, &modeAlpha));
  }

  glBlendEquationSeparate(modeRGB, modeAlpha);
}

void glBlendFunc_native(Dart_NativeArguments arguments) {
  Dart_Handle sfactor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t sfactor = 0;
  if (Dart_IsInteger(sfactor_obj)) {
    HandleError(Dart_IntegerToInt64(sfactor_obj, &sfactor));
  }

  Dart_Handle dfactor_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t dfactor = 0;
  if (Dart_IsInteger(dfactor_obj)) {
    HandleError(Dart_IntegerToInt64(dfactor_obj, &dfactor));
  }

  glBlendFunc(sfactor, dfactor);
}

void glBlendFuncSeparate_native(Dart_NativeArguments arguments) {
  Dart_Handle sfactorRGB_obj =
      HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t sfactorRGB = 0;
  if (Dart_IsInteger(sfactorRGB_obj)) {
    HandleError(Dart_IntegerToInt64(sfactorRGB_obj, &sfactorRGB));
  }

  Dart_Handle dfactorRGB_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t dfactorRGB = 0;
  if (Dart_IsInteger(dfactorRGB_obj)) {
    HandleError(Dart_IntegerToInt64(dfactorRGB_obj, &dfactorRGB));
  }

  Dart_Handle sfactorAlpha_obj =
      HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t sfactorAlpha = 0;
  if (Dart_IsInteger(sfactorAlpha_obj)) {
    HandleError(Dart_IntegerToInt64(sfactorAlpha_obj, &sfactorAlpha));
  }

  Dart_Handle dfactorAlpha_obj =
      HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t dfactorAlpha = 0;
  if (Dart_IsInteger(dfactorAlpha_obj)) {
    HandleError(Dart_IntegerToInt64(dfactorAlpha_obj, &dfactorAlpha));
  }

  glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void glBufferData_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle size_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t size = 0;
  if (Dart_IsInteger(size_obj)) {
    HandleError(Dart_IntegerToInt64(size_obj, &size));
  }

  Dart_Handle data_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* data_data = NULL;
  Dart_TypedData_Type data_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t data_typeddata_length = 0;
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataAcquireData(data_obj, &data_typeddata_type,
                                          &data_data, &data_typeddata_length));
  }
  const void* data = static_cast<const void*>(data_data);

  Dart_Handle usage_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t usage = 0;
  if (Dart_IsInteger(usage_obj)) {
    HandleError(Dart_IntegerToInt64(usage_obj, &usage));
  }

  glBufferData(target, size, data, usage);
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataReleaseData(data_obj));
  }
}

void glBufferSubData_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle offset_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t offset = 0;
  if (Dart_IsInteger(offset_obj)) {
    HandleError(Dart_IntegerToInt64(offset_obj, &offset));
  }

  Dart_Handle size_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t size = 0;
  if (Dart_IsInteger(size_obj)) {
    HandleError(Dart_IntegerToInt64(size_obj, &size));
  }

  Dart_Handle data_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  void* data_data = NULL;
  Dart_TypedData_Type data_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t data_typeddata_length = 0;
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataAcquireData(data_obj, &data_typeddata_type,
                                          &data_data, &data_typeddata_length));
  }
  const void* data = static_cast<const void*>(data_data);

  glBufferSubData(target, offset, size, data);
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataReleaseData(data_obj));
  }
}

void glCheckFramebufferStatus_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  GLenum ret = glCheckFramebufferStatus(target);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glClear_native(Dart_NativeArguments arguments) {
  Dart_Handle mask_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mask = 0;
  if (Dart_IsInteger(mask_obj)) {
    HandleError(Dart_IntegerToInt64(mask_obj, &mask));
  }

  glClear(mask);
}

void glClearColor_native(Dart_NativeArguments arguments) {
  Dart_Handle red_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double red = 0.0;
  if (Dart_IsDouble(red_obj)) {
    HandleError(Dart_DoubleValue(red_obj, &red));
  }

  Dart_Handle green_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double green = 0.0;
  if (Dart_IsDouble(green_obj)) {
    HandleError(Dart_DoubleValue(green_obj, &green));
  }

  Dart_Handle blue_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double blue = 0.0;
  if (Dart_IsDouble(blue_obj)) {
    HandleError(Dart_DoubleValue(blue_obj, &blue));
  }

  Dart_Handle alpha_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double alpha = 0.0;
  if (Dart_IsDouble(alpha_obj)) {
    HandleError(Dart_DoubleValue(alpha_obj, &alpha));
  }

  glClearColor(red, green, blue, alpha);
}

void glClearDepthf_native(Dart_NativeArguments arguments) {
  Dart_Handle d_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double d = 0.0;
  if (Dart_IsDouble(d_obj)) {
    HandleError(Dart_DoubleValue(d_obj, &d));
  }

  glClearDepthf(d);
}

void glClearStencil_native(Dart_NativeArguments arguments) {
  Dart_Handle s_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t s = 0;
  if (Dart_IsInteger(s_obj)) {
    HandleError(Dart_IntegerToInt64(s_obj, &s));
  }

  glClearStencil(s);
}

void glColorMask_native(Dart_NativeArguments arguments) {
  Dart_Handle red_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  bool red = 0;
  if (Dart_IsBoolean(red_obj)) {
    HandleError(Dart_BooleanValue(red_obj, &red));
  }

  Dart_Handle green_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  bool green = 0;
  if (Dart_IsBoolean(green_obj)) {
    HandleError(Dart_BooleanValue(green_obj, &green));
  }

  Dart_Handle blue_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  bool blue = 0;
  if (Dart_IsBoolean(blue_obj)) {
    HandleError(Dart_BooleanValue(blue_obj, &blue));
  }

  Dart_Handle alpha_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  bool alpha = 0;
  if (Dart_IsBoolean(alpha_obj)) {
    HandleError(Dart_BooleanValue(alpha_obj, &alpha));
  }

  glColorMask(red, green, blue, alpha);
}

void glCompileShader_native(Dart_NativeArguments arguments) {
  Dart_Handle shader_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t shader = 0;
  if (Dart_IsInteger(shader_obj)) {
    HandleError(Dart_IntegerToInt64(shader_obj, &shader));
  }

  glCompileShader(shader);
}

void glCompressedTexImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle internalformat_obj =
      HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t internalformat = 0;
  if (Dart_IsInteger(internalformat_obj)) {
    HandleError(Dart_IntegerToInt64(internalformat_obj, &internalformat));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle border_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t border = 0;
  if (Dart_IsInteger(border_obj)) {
    HandleError(Dart_IntegerToInt64(border_obj, &border));
  }

  Dart_Handle imageSize_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t imageSize = 0;
  if (Dart_IsInteger(imageSize_obj)) {
    HandleError(Dart_IntegerToInt64(imageSize_obj, &imageSize));
  }

  Dart_Handle data_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  void* data_data = NULL;
  Dart_TypedData_Type data_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t data_typeddata_length = 0;
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataAcquireData(data_obj, &data_typeddata_type,
                                          &data_data, &data_typeddata_length));
  }
  const void* data = static_cast<const void*>(data_data);

  glCompressedTexImage2D(target, level, internalformat, width, height, border,
                         imageSize, data);
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataReleaseData(data_obj));
  }
}

void glCompressedTexSubImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle xoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t xoffset = 0;
  if (Dart_IsInteger(xoffset_obj)) {
    HandleError(Dart_IntegerToInt64(xoffset_obj, &xoffset));
  }

  Dart_Handle yoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t yoffset = 0;
  if (Dart_IsInteger(yoffset_obj)) {
    HandleError(Dart_IntegerToInt64(yoffset_obj, &yoffset));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle format_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t format = 0;
  if (Dart_IsInteger(format_obj)) {
    HandleError(Dart_IntegerToInt64(format_obj, &format));
  }

  Dart_Handle imageSize_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  int64_t imageSize = 0;
  if (Dart_IsInteger(imageSize_obj)) {
    HandleError(Dart_IntegerToInt64(imageSize_obj, &imageSize));
  }

  Dart_Handle data_obj = HandleError(Dart_GetNativeArgument(arguments, 8));

  void* data_data = NULL;
  Dart_TypedData_Type data_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t data_typeddata_length = 0;
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataAcquireData(data_obj, &data_typeddata_type,
                                          &data_data, &data_typeddata_length));
  }
  const void* data = static_cast<const void*>(data_data);

  glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height,
                            format, imageSize, data);
  if (Dart_IsTypedData(data_obj) && !Dart_IsNull(data_obj)) {
    HandleError(Dart_TypedDataReleaseData(data_obj));
  }
}

void glCopyTexImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle internalformat_obj =
      HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t internalformat = 0;
  if (Dart_IsInteger(internalformat_obj)) {
    HandleError(Dart_IntegerToInt64(internalformat_obj, &internalformat));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t x = 0;
  if (Dart_IsInteger(x_obj)) {
    HandleError(Dart_IntegerToInt64(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t y = 0;
  if (Dart_IsInteger(y_obj)) {
    HandleError(Dart_IntegerToInt64(y_obj, &y));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle border_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  int64_t border = 0;
  if (Dart_IsInteger(border_obj)) {
    HandleError(Dart_IntegerToInt64(border_obj, &border));
  }

  glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

void glCopyTexSubImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle xoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t xoffset = 0;
  if (Dart_IsInteger(xoffset_obj)) {
    HandleError(Dart_IntegerToInt64(xoffset_obj, &xoffset));
  }

  Dart_Handle yoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t yoffset = 0;
  if (Dart_IsInteger(yoffset_obj)) {
    HandleError(Dart_IntegerToInt64(yoffset_obj, &yoffset));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t x = 0;
  if (Dart_IsInteger(x_obj)) {
    HandleError(Dart_IntegerToInt64(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t y = 0;
  if (Dart_IsInteger(y_obj)) {
    HandleError(Dart_IntegerToInt64(y_obj, &y));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

void glCreateProgram_native(Dart_NativeArguments arguments) {
  GLuint ret = glCreateProgram();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glCreateShader_native(Dart_NativeArguments arguments) {
  Dart_Handle type_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t type = 0;
  if (Dart_IsInteger(type_obj)) {
    HandleError(Dart_IntegerToInt64(type_obj, &type));
  }

  GLuint ret = glCreateShader(type);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glCullFace_native(Dart_NativeArguments arguments) {
  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  glCullFace(mode);
}

void glDeleteProgram_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  glDeleteProgram(program);
}

void glDeleteShader_native(Dart_NativeArguments arguments) {
  Dart_Handle shader_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t shader = 0;
  if (Dart_IsInteger(shader_obj)) {
    HandleError(Dart_IntegerToInt64(shader_obj, &shader));
  }

  glDeleteShader(shader);
}

void glDepthFunc_native(Dart_NativeArguments arguments) {
  Dart_Handle func_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t func = 0;
  if (Dart_IsInteger(func_obj)) {
    HandleError(Dart_IntegerToInt64(func_obj, &func));
  }

  glDepthFunc(func);
}

void glDepthMask_native(Dart_NativeArguments arguments) {
  Dart_Handle flag_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  bool flag = 0;
  if (Dart_IsBoolean(flag_obj)) {
    HandleError(Dart_BooleanValue(flag_obj, &flag));
  }

  glDepthMask(flag);
}

void glDepthRangef_native(Dart_NativeArguments arguments) {
  Dart_Handle n_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double n = 0.0;
  if (Dart_IsDouble(n_obj)) {
    HandleError(Dart_DoubleValue(n_obj, &n));
  }

  Dart_Handle f_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double f = 0.0;
  if (Dart_IsDouble(f_obj)) {
    HandleError(Dart_DoubleValue(f_obj, &f));
  }

  glDepthRangef(n, f);
}

void glDetachShader_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  Dart_Handle shader_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t shader = 0;
  if (Dart_IsInteger(shader_obj)) {
    HandleError(Dart_IntegerToInt64(shader_obj, &shader));
  }

  glDetachShader(program, shader);
}

void glDisable_native(Dart_NativeArguments arguments) {
  Dart_Handle cap_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t cap = 0;
  if (Dart_IsInteger(cap_obj)) {
    HandleError(Dart_IntegerToInt64(cap_obj, &cap));
  }

  glDisable(cap);
}

void glDisableVertexAttribArray_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  glDisableVertexAttribArray(index);
}

void glDrawArrays_native(Dart_NativeArguments arguments) {
  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  Dart_Handle first_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t first = 0;
  if (Dart_IsInteger(first_obj)) {
    HandleError(Dart_IntegerToInt64(first_obj, &first));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  glDrawArrays(mode, first, count);
}

void glDrawElements_native(Dart_NativeArguments arguments) {
  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle type_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t type = 0;
  if (Dart_IsInteger(type_obj)) {
    HandleError(Dart_IntegerToInt64(type_obj, &type));
  }

  Dart_Handle indices_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  void* indices_data = NULL;
  Dart_TypedData_Type indices_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t indices_typeddata_length = 0;
  if (Dart_IsTypedData(indices_obj) && !Dart_IsNull(indices_obj)) {
    HandleError(Dart_TypedDataAcquireData(indices_obj, &indices_typeddata_type,
                                          &indices_data,
                                          &indices_typeddata_length));
  }
  const void* indices = static_cast<const void*>(indices_data);

  glDrawElements(mode, count, type, indices);
  if (Dart_IsTypedData(indices_obj) && !Dart_IsNull(indices_obj)) {
    HandleError(Dart_TypedDataReleaseData(indices_obj));
  }
}

void glEnable_native(Dart_NativeArguments arguments) {
  Dart_Handle cap_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t cap = 0;
  if (Dart_IsInteger(cap_obj)) {
    HandleError(Dart_IntegerToInt64(cap_obj, &cap));
  }

  glEnable(cap);
}

void glEnableVertexAttribArray_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  glEnableVertexAttribArray(index);
}

void glFinish_native(Dart_NativeArguments arguments) { glFinish(); }

void glFlush_native(Dart_NativeArguments arguments) { glFlush(); }

void glFramebufferRenderbuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle attachment_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t attachment = 0;
  if (Dart_IsInteger(attachment_obj)) {
    HandleError(Dart_IntegerToInt64(attachment_obj, &attachment));
  }

  Dart_Handle renderbuffertarget_obj =
      HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t renderbuffertarget = 0;
  if (Dart_IsInteger(renderbuffertarget_obj)) {
    HandleError(
        Dart_IntegerToInt64(renderbuffertarget_obj, &renderbuffertarget));
  }

  Dart_Handle renderbuffer_obj =
      HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t renderbuffer = 0;
  if (Dart_IsInteger(renderbuffer_obj)) {
    HandleError(Dart_IntegerToInt64(renderbuffer_obj, &renderbuffer));
  }

  glFramebufferRenderbuffer(target, attachment, renderbuffertarget,
                            renderbuffer);
}

void glFramebufferTexture2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle attachment_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t attachment = 0;
  if (Dart_IsInteger(attachment_obj)) {
    HandleError(Dart_IntegerToInt64(attachment_obj, &attachment));
  }

  Dart_Handle textarget_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t textarget = 0;
  if (Dart_IsInteger(textarget_obj)) {
    HandleError(Dart_IntegerToInt64(textarget_obj, &textarget));
  }

  Dart_Handle texture_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t texture = 0;
  if (Dart_IsInteger(texture_obj)) {
    HandleError(Dart_IntegerToInt64(texture_obj, &texture));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

void glFrontFace_native(Dart_NativeArguments arguments) {
  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  glFrontFace(mode);
}

void glGenerateMipmap_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  glGenerateMipmap(target);
}

void glGetAttribLocation_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  Dart_Handle name_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  const char* name = NULL;
  if (Dart_IsString(name_obj)) {
    HandleError(Dart_StringToCString(name_obj, &name));
  }

  GLint ret = glGetAttribLocation(program, name);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glGetError_native(Dart_NativeArguments arguments) {
  GLenum ret = glGetError();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glGetString_native(Dart_NativeArguments arguments) {
  Dart_Handle name_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t name = 0;
  if (Dart_IsInteger(name_obj)) {
    HandleError(Dart_IntegerToInt64(name_obj, &name));
  }

  const GLubyte* ret = glGetString(name);
  Dart_SetReturnValue(arguments,
                      HandleError(Dart_NewStringFromGLubyteString(ret)));
}

void glGetUniformLocation_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  Dart_Handle name_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  const char* name = NULL;
  if (Dart_IsString(name_obj)) {
    HandleError(Dart_StringToCString(name_obj, &name));
  }

  GLint ret = glGetUniformLocation(program, name);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glHint_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  glHint(target, mode);
}

void glIsBuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle buffer_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t buffer = 0;
  if (Dart_IsInteger(buffer_obj)) {
    HandleError(Dart_IntegerToInt64(buffer_obj, &buffer));
  }

  GLboolean ret = glIsBuffer(buffer);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsEnabled_native(Dart_NativeArguments arguments) {
  Dart_Handle cap_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t cap = 0;
  if (Dart_IsInteger(cap_obj)) {
    HandleError(Dart_IntegerToInt64(cap_obj, &cap));
  }

  GLboolean ret = glIsEnabled(cap);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsFramebuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle framebuffer_obj =
      HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t framebuffer = 0;
  if (Dart_IsInteger(framebuffer_obj)) {
    HandleError(Dart_IntegerToInt64(framebuffer_obj, &framebuffer));
  }

  GLboolean ret = glIsFramebuffer(framebuffer);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsProgram_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  GLboolean ret = glIsProgram(program);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsRenderbuffer_native(Dart_NativeArguments arguments) {
  Dart_Handle renderbuffer_obj =
      HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t renderbuffer = 0;
  if (Dart_IsInteger(renderbuffer_obj)) {
    HandleError(Dart_IntegerToInt64(renderbuffer_obj, &renderbuffer));
  }

  GLboolean ret = glIsRenderbuffer(renderbuffer);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsShader_native(Dart_NativeArguments arguments) {
  Dart_Handle shader_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t shader = 0;
  if (Dart_IsInteger(shader_obj)) {
    HandleError(Dart_IntegerToInt64(shader_obj, &shader));
  }

  GLboolean ret = glIsShader(shader);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glIsTexture_native(Dart_NativeArguments arguments) {
  Dart_Handle texture_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t texture = 0;
  if (Dart_IsInteger(texture_obj)) {
    HandleError(Dart_IntegerToInt64(texture_obj, &texture));
  }

  GLboolean ret = glIsTexture(texture);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glLineWidth_native(Dart_NativeArguments arguments) {
  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double width = 0.0;
  if (Dart_IsDouble(width_obj)) {
    HandleError(Dart_DoubleValue(width_obj, &width));
  }

  glLineWidth(width);
}

void glLinkProgram_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  glLinkProgram(program);
}

void glPixelStorei_native(Dart_NativeArguments arguments) {
  Dart_Handle pname_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t pname = 0;
  if (Dart_IsInteger(pname_obj)) {
    HandleError(Dart_IntegerToInt64(pname_obj, &pname));
  }

  Dart_Handle param_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t param = 0;
  if (Dart_IsInteger(param_obj)) {
    HandleError(Dart_IntegerToInt64(param_obj, &param));
  }

  glPixelStorei(pname, param);
}

void glPolygonOffset_native(Dart_NativeArguments arguments) {
  Dart_Handle factor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double factor = 0.0;
  if (Dart_IsDouble(factor_obj)) {
    HandleError(Dart_DoubleValue(factor_obj, &factor));
  }

  Dart_Handle units_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double units = 0.0;
  if (Dart_IsDouble(units_obj)) {
    HandleError(Dart_DoubleValue(units_obj, &units));
  }

  glPolygonOffset(factor, units);
}

void glReleaseShaderCompiler_native(Dart_NativeArguments arguments) {
  glReleaseShaderCompiler();
}

void glRenderbufferStorage_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle internalformat_obj =
      HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t internalformat = 0;
  if (Dart_IsInteger(internalformat_obj)) {
    HandleError(Dart_IntegerToInt64(internalformat_obj, &internalformat));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  glRenderbufferStorage(target, internalformat, width, height);
}

void glSampleCoverage_native(Dart_NativeArguments arguments) {
  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double value = 0.0;
  if (Dart_IsDouble(value_obj)) {
    HandleError(Dart_DoubleValue(value_obj, &value));
  }

  Dart_Handle invert_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  bool invert = 0;
  if (Dart_IsBoolean(invert_obj)) {
    HandleError(Dart_BooleanValue(invert_obj, &invert));
  }

  glSampleCoverage(value, invert);
}

void glScissor_native(Dart_NativeArguments arguments) {
  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t x = 0;
  if (Dart_IsInteger(x_obj)) {
    HandleError(Dart_IntegerToInt64(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t y = 0;
  if (Dart_IsInteger(y_obj)) {
    HandleError(Dart_IntegerToInt64(y_obj, &y));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  glScissor(x, y, width, height);
}

void glStencilFunc_native(Dart_NativeArguments arguments) {
  Dart_Handle func_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t func = 0;
  if (Dart_IsInteger(func_obj)) {
    HandleError(Dart_IntegerToInt64(func_obj, &func));
  }

  Dart_Handle ref_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t ref = 0;
  if (Dart_IsInteger(ref_obj)) {
    HandleError(Dart_IntegerToInt64(ref_obj, &ref));
  }

  Dart_Handle mask_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t mask = 0;
  if (Dart_IsInteger(mask_obj)) {
    HandleError(Dart_IntegerToInt64(mask_obj, &mask));
  }

  glStencilFunc(func, ref, mask);
}

void glStencilFuncSeparate_native(Dart_NativeArguments arguments) {
  Dart_Handle face_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t face = 0;
  if (Dart_IsInteger(face_obj)) {
    HandleError(Dart_IntegerToInt64(face_obj, &face));
  }

  Dart_Handle func_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t func = 0;
  if (Dart_IsInteger(func_obj)) {
    HandleError(Dart_IntegerToInt64(func_obj, &func));
  }

  Dart_Handle ref_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t ref = 0;
  if (Dart_IsInteger(ref_obj)) {
    HandleError(Dart_IntegerToInt64(ref_obj, &ref));
  }

  Dart_Handle mask_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t mask = 0;
  if (Dart_IsInteger(mask_obj)) {
    HandleError(Dart_IntegerToInt64(mask_obj, &mask));
  }

  glStencilFuncSeparate(face, func, ref, mask);
}

void glStencilMask_native(Dart_NativeArguments arguments) {
  Dart_Handle mask_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t mask = 0;
  if (Dart_IsInteger(mask_obj)) {
    HandleError(Dart_IntegerToInt64(mask_obj, &mask));
  }

  glStencilMask(mask);
}

void glStencilMaskSeparate_native(Dart_NativeArguments arguments) {
  Dart_Handle face_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t face = 0;
  if (Dart_IsInteger(face_obj)) {
    HandleError(Dart_IntegerToInt64(face_obj, &face));
  }

  Dart_Handle mask_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t mask = 0;
  if (Dart_IsInteger(mask_obj)) {
    HandleError(Dart_IntegerToInt64(mask_obj, &mask));
  }

  glStencilMaskSeparate(face, mask);
}

void glStencilOp_native(Dart_NativeArguments arguments) {
  Dart_Handle fail_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t fail = 0;
  if (Dart_IsInteger(fail_obj)) {
    HandleError(Dart_IntegerToInt64(fail_obj, &fail));
  }

  Dart_Handle zfail_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t zfail = 0;
  if (Dart_IsInteger(zfail_obj)) {
    HandleError(Dart_IntegerToInt64(zfail_obj, &zfail));
  }

  Dart_Handle zpass_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t zpass = 0;
  if (Dart_IsInteger(zpass_obj)) {
    HandleError(Dart_IntegerToInt64(zpass_obj, &zpass));
  }

  glStencilOp(fail, zfail, zpass);
}

void glStencilOpSeparate_native(Dart_NativeArguments arguments) {
  Dart_Handle face_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t face = 0;
  if (Dart_IsInteger(face_obj)) {
    HandleError(Dart_IntegerToInt64(face_obj, &face));
  }

  Dart_Handle sfail_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t sfail = 0;
  if (Dart_IsInteger(sfail_obj)) {
    HandleError(Dart_IntegerToInt64(sfail_obj, &sfail));
  }

  Dart_Handle dpfail_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t dpfail = 0;
  if (Dart_IsInteger(dpfail_obj)) {
    HandleError(Dart_IntegerToInt64(dpfail_obj, &dpfail));
  }

  Dart_Handle dppass_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t dppass = 0;
  if (Dart_IsInteger(dppass_obj)) {
    HandleError(Dart_IntegerToInt64(dppass_obj, &dppass));
  }

  glStencilOpSeparate(face, sfail, dpfail, dppass);
}

void glTexImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle internalformat_obj =
      HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t internalformat = 0;
  if (Dart_IsInteger(internalformat_obj)) {
    HandleError(Dart_IntegerToInt64(internalformat_obj, &internalformat));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle border_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t border = 0;
  if (Dart_IsInteger(border_obj)) {
    HandleError(Dart_IntegerToInt64(border_obj, &border));
  }

  Dart_Handle format_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t format = 0;
  if (Dart_IsInteger(format_obj)) {
    HandleError(Dart_IntegerToInt64(format_obj, &format));
  }

  Dart_Handle type_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  int64_t type = 0;
  if (Dart_IsInteger(type_obj)) {
    HandleError(Dart_IntegerToInt64(type_obj, &type));
  }

  Dart_Handle pixels_obj = HandleError(Dart_GetNativeArgument(arguments, 8));

  void* pixels_data = NULL;
  Dart_TypedData_Type pixels_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t pixels_typeddata_length = 0;
  if (Dart_IsTypedData(pixels_obj) && !Dart_IsNull(pixels_obj)) {
    HandleError(Dart_TypedDataAcquireData(pixels_obj, &pixels_typeddata_type,
                                          &pixels_data,
                                          &pixels_typeddata_length));
  }
  const void* pixels = static_cast<const void*>(pixels_data);

  glTexImage2D(target, level, internalformat, width, height, border, format,
               type, pixels);
  if (Dart_IsTypedData(pixels_obj) && !Dart_IsNull(pixels_obj)) {
    HandleError(Dart_TypedDataReleaseData(pixels_obj));
  }
}

void glTexParameterf_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle pname_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t pname = 0;
  if (Dart_IsInteger(pname_obj)) {
    HandleError(Dart_IntegerToInt64(pname_obj, &pname));
  }

  Dart_Handle param_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double param = 0.0;
  if (Dart_IsDouble(param_obj)) {
    HandleError(Dart_DoubleValue(param_obj, &param));
  }

  glTexParameterf(target, pname, param);
}

void glTexParameteri_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle pname_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t pname = 0;
  if (Dart_IsInteger(pname_obj)) {
    HandleError(Dart_IntegerToInt64(pname_obj, &pname));
  }

  Dart_Handle param_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t param = 0;
  if (Dart_IsInteger(param_obj)) {
    HandleError(Dart_IntegerToInt64(param_obj, &param));
  }

  glTexParameteri(target, pname, param);
}

void glTexSubImage2D_native(Dart_NativeArguments arguments) {
  Dart_Handle target_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t target = 0;
  if (Dart_IsInteger(target_obj)) {
    HandleError(Dart_IntegerToInt64(target_obj, &target));
  }

  Dart_Handle level_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t level = 0;
  if (Dart_IsInteger(level_obj)) {
    HandleError(Dart_IntegerToInt64(level_obj, &level));
  }

  Dart_Handle xoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t xoffset = 0;
  if (Dart_IsInteger(xoffset_obj)) {
    HandleError(Dart_IntegerToInt64(xoffset_obj, &xoffset));
  }

  Dart_Handle yoffset_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t yoffset = 0;
  if (Dart_IsInteger(yoffset_obj)) {
    HandleError(Dart_IntegerToInt64(yoffset_obj, &yoffset));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle format_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t format = 0;
  if (Dart_IsInteger(format_obj)) {
    HandleError(Dart_IntegerToInt64(format_obj, &format));
  }

  Dart_Handle type_obj = HandleError(Dart_GetNativeArgument(arguments, 7));

  int64_t type = 0;
  if (Dart_IsInteger(type_obj)) {
    HandleError(Dart_IntegerToInt64(type_obj, &type));
  }

  Dart_Handle pixels_obj = HandleError(Dart_GetNativeArgument(arguments, 8));

  void* pixels_data = NULL;
  Dart_TypedData_Type pixels_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t pixels_typeddata_length = 0;
  if (Dart_IsTypedData(pixels_obj) && !Dart_IsNull(pixels_obj)) {
    HandleError(Dart_TypedDataAcquireData(pixels_obj, &pixels_typeddata_type,
                                          &pixels_data,
                                          &pixels_typeddata_length));
  }
  const void* pixels = static_cast<const void*>(pixels_data);

  glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type,
                  pixels);
  if (Dart_IsTypedData(pixels_obj) && !Dart_IsNull(pixels_obj)) {
    HandleError(Dart_TypedDataReleaseData(pixels_obj));
  }
}

void glUniform1f_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double v0 = 0.0;
  if (Dart_IsDouble(v0_obj)) {
    HandleError(Dart_DoubleValue(v0_obj, &v0));
  }

  glUniform1f(location, v0);
}

void glUniform1fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniform1fv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform1i_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t v0 = 0;
  if (Dart_IsInteger(v0_obj)) {
    HandleError(Dart_IntegerToInt64(v0_obj, &v0));
  }

  glUniform1i(location, v0);
}

void glUniform1iv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLint* value = static_cast<const GLint*>(value_data);

  glUniform1iv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform2f_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double v0 = 0.0;
  if (Dart_IsDouble(v0_obj)) {
    HandleError(Dart_DoubleValue(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double v1 = 0.0;
  if (Dart_IsDouble(v1_obj)) {
    HandleError(Dart_DoubleValue(v1_obj, &v1));
  }

  glUniform2f(location, v0, v1);
}

void glUniform2fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniform2fv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform2i_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t v0 = 0;
  if (Dart_IsInteger(v0_obj)) {
    HandleError(Dart_IntegerToInt64(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t v1 = 0;
  if (Dart_IsInteger(v1_obj)) {
    HandleError(Dart_IntegerToInt64(v1_obj, &v1));
  }

  glUniform2i(location, v0, v1);
}

void glUniform2iv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLint* value = static_cast<const GLint*>(value_data);

  glUniform2iv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform3f_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double v0 = 0.0;
  if (Dart_IsDouble(v0_obj)) {
    HandleError(Dart_DoubleValue(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double v1 = 0.0;
  if (Dart_IsDouble(v1_obj)) {
    HandleError(Dart_DoubleValue(v1_obj, &v1));
  }

  Dart_Handle v2_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double v2 = 0.0;
  if (Dart_IsDouble(v2_obj)) {
    HandleError(Dart_DoubleValue(v2_obj, &v2));
  }

  glUniform3f(location, v0, v1, v2);
}

void glUniform3fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniform3fv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform3i_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t v0 = 0;
  if (Dart_IsInteger(v0_obj)) {
    HandleError(Dart_IntegerToInt64(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t v1 = 0;
  if (Dart_IsInteger(v1_obj)) {
    HandleError(Dart_IntegerToInt64(v1_obj, &v1));
  }

  Dart_Handle v2_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t v2 = 0;
  if (Dart_IsInteger(v2_obj)) {
    HandleError(Dart_IntegerToInt64(v2_obj, &v2));
  }

  glUniform3i(location, v0, v1, v2);
}

void glUniform3iv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLint* value = static_cast<const GLint*>(value_data);

  glUniform3iv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform4f_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double v0 = 0.0;
  if (Dart_IsDouble(v0_obj)) {
    HandleError(Dart_DoubleValue(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double v1 = 0.0;
  if (Dart_IsDouble(v1_obj)) {
    HandleError(Dart_DoubleValue(v1_obj, &v1));
  }

  Dart_Handle v2_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double v2 = 0.0;
  if (Dart_IsDouble(v2_obj)) {
    HandleError(Dart_DoubleValue(v2_obj, &v2));
  }

  Dart_Handle v3_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  double v3 = 0.0;
  if (Dart_IsDouble(v3_obj)) {
    HandleError(Dart_DoubleValue(v3_obj, &v3));
  }

  glUniform4f(location, v0, v1, v2, v3);
}

void glUniform4fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniform4fv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniform4i_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle v0_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t v0 = 0;
  if (Dart_IsInteger(v0_obj)) {
    HandleError(Dart_IntegerToInt64(v0_obj, &v0));
  }

  Dart_Handle v1_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t v1 = 0;
  if (Dart_IsInteger(v1_obj)) {
    HandleError(Dart_IntegerToInt64(v1_obj, &v1));
  }

  Dart_Handle v2_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t v2 = 0;
  if (Dart_IsInteger(v2_obj)) {
    HandleError(Dart_IntegerToInt64(v2_obj, &v2));
  }

  Dart_Handle v3_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t v3 = 0;
  if (Dart_IsInteger(v3_obj)) {
    HandleError(Dart_IntegerToInt64(v3_obj, &v3));
  }

  glUniform4i(location, v0, v1, v2, v3);
}

void glUniform4iv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLint* value = static_cast<const GLint*>(value_data);

  glUniform4iv(location, count, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniformMatrix2fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle transpose_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  bool transpose = 0;
  if (Dart_IsBoolean(transpose_obj)) {
    HandleError(Dart_BooleanValue(transpose_obj, &transpose));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniformMatrix2fv(location, count, transpose, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniformMatrix3fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle transpose_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  bool transpose = 0;
  if (Dart_IsBoolean(transpose_obj)) {
    HandleError(Dart_BooleanValue(transpose_obj, &transpose));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniformMatrix3fv(location, count, transpose, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUniformMatrix4fv_native(Dart_NativeArguments arguments) {
  Dart_Handle location_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t location = 0;
  if (Dart_IsInteger(location_obj)) {
    HandleError(Dart_IntegerToInt64(location_obj, &location));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle transpose_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  bool transpose = 0;
  if (Dart_IsBoolean(transpose_obj)) {
    HandleError(Dart_BooleanValue(transpose_obj, &transpose));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  void* value_data = NULL;
  Dart_TypedData_Type value_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t value_typeddata_length = 0;
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataAcquireData(value_obj, &value_typeddata_type,
                                          &value_data,
                                          &value_typeddata_length));
  }
  const GLfloat* value = static_cast<const GLfloat*>(value_data);

  glUniformMatrix4fv(location, count, transpose, value);
  if (Dart_IsTypedData(value_obj) && !Dart_IsNull(value_obj)) {
    HandleError(Dart_TypedDataReleaseData(value_obj));
  }
}

void glUseProgram_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  glUseProgram(program);
}

void glValidateProgram_native(Dart_NativeArguments arguments) {
  Dart_Handle program_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t program = 0;
  if (Dart_IsInteger(program_obj)) {
    HandleError(Dart_IntegerToInt64(program_obj, &program));
  }

  glValidateProgram(program);
}

void glVertexAttrib1f_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double x = 0.0;
  if (Dart_IsDouble(x_obj)) {
    HandleError(Dart_DoubleValue(x_obj, &x));
  }

  glVertexAttrib1f(index, x);
}

void glVertexAttrib1fv_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle v_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  void* v_data = NULL;
  Dart_TypedData_Type v_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t v_typeddata_length = 0;
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataAcquireData(v_obj, &v_typeddata_type, &v_data,
                                          &v_typeddata_length));
  }
  const GLfloat* v = static_cast<const GLfloat*>(v_data);

  glVertexAttrib1fv(index, v);
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataReleaseData(v_obj));
  }
}

void glVertexAttrib2f_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double x = 0.0;
  if (Dart_IsDouble(x_obj)) {
    HandleError(Dart_DoubleValue(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double y = 0.0;
  if (Dart_IsDouble(y_obj)) {
    HandleError(Dart_DoubleValue(y_obj, &y));
  }

  glVertexAttrib2f(index, x, y);
}

void glVertexAttrib2fv_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle v_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  void* v_data = NULL;
  Dart_TypedData_Type v_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t v_typeddata_length = 0;
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataAcquireData(v_obj, &v_typeddata_type, &v_data,
                                          &v_typeddata_length));
  }
  const GLfloat* v = static_cast<const GLfloat*>(v_data);

  glVertexAttrib2fv(index, v);
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataReleaseData(v_obj));
  }
}

void glVertexAttrib3f_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double x = 0.0;
  if (Dart_IsDouble(x_obj)) {
    HandleError(Dart_DoubleValue(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double y = 0.0;
  if (Dart_IsDouble(y_obj)) {
    HandleError(Dart_DoubleValue(y_obj, &y));
  }

  Dart_Handle z_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double z = 0.0;
  if (Dart_IsDouble(z_obj)) {
    HandleError(Dart_DoubleValue(z_obj, &z));
  }

  glVertexAttrib3f(index, x, y, z);
}

void glVertexAttrib3fv_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle v_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  void* v_data = NULL;
  Dart_TypedData_Type v_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t v_typeddata_length = 0;
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataAcquireData(v_obj, &v_typeddata_type, &v_data,
                                          &v_typeddata_length));
  }
  const GLfloat* v = static_cast<const GLfloat*>(v_data);

  glVertexAttrib3fv(index, v);
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataReleaseData(v_obj));
  }
}

void glVertexAttrib4f_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double x = 0.0;
  if (Dart_IsDouble(x_obj)) {
    HandleError(Dart_DoubleValue(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double y = 0.0;
  if (Dart_IsDouble(y_obj)) {
    HandleError(Dart_DoubleValue(y_obj, &y));
  }

  Dart_Handle z_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  double z = 0.0;
  if (Dart_IsDouble(z_obj)) {
    HandleError(Dart_DoubleValue(z_obj, &z));
  }

  Dart_Handle w_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  double w = 0.0;
  if (Dart_IsDouble(w_obj)) {
    HandleError(Dart_DoubleValue(w_obj, &w));
  }

  glVertexAttrib4f(index, x, y, z, w);
}

void glVertexAttrib4fv_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle v_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  void* v_data = NULL;
  Dart_TypedData_Type v_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t v_typeddata_length = 0;
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataAcquireData(v_obj, &v_typeddata_type, &v_data,
                                          &v_typeddata_length));
  }
  const GLfloat* v = static_cast<const GLfloat*>(v_data);

  glVertexAttrib4fv(index, v);
  if (Dart_IsTypedData(v_obj) && !Dart_IsNull(v_obj)) {
    HandleError(Dart_TypedDataReleaseData(v_obj));
  }
}

void glVertexAttribPointer_native(Dart_NativeArguments arguments) {
  Dart_Handle index_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t index = 0;
  if (Dart_IsInteger(index_obj)) {
    HandleError(Dart_IntegerToInt64(index_obj, &index));
  }

  Dart_Handle size_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t size = 0;
  if (Dart_IsInteger(size_obj)) {
    HandleError(Dart_IntegerToInt64(size_obj, &size));
  }

  Dart_Handle type_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t type = 0;
  if (Dart_IsInteger(type_obj)) {
    HandleError(Dart_IntegerToInt64(type_obj, &type));
  }

  Dart_Handle normalized_obj =
      HandleError(Dart_GetNativeArgument(arguments, 3));

  bool normalized = 0;
  if (Dart_IsBoolean(normalized_obj)) {
    HandleError(Dart_BooleanValue(normalized_obj, &normalized));
  }

  Dart_Handle stride_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t stride = 0;
  if (Dart_IsInteger(stride_obj)) {
    HandleError(Dart_IntegerToInt64(stride_obj, &stride));
  }

  Dart_Handle pointer_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  void* pointer_data = NULL;
  Dart_TypedData_Type pointer_typeddata_type = Dart_TypedData_kInvalid;
  intptr_t pointer_typeddata_length = 0;
  if (Dart_IsTypedData(pointer_obj) && !Dart_IsNull(pointer_obj)) {
    HandleError(Dart_TypedDataAcquireData(pointer_obj, &pointer_typeddata_type,
                                          &pointer_data,
                                          &pointer_typeddata_length));
  }
  const void* pointer = static_cast<const void*>(pointer_data);

  glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  if (Dart_IsTypedData(pointer_obj) && !Dart_IsNull(pointer_obj)) {
    HandleError(Dart_TypedDataReleaseData(pointer_obj));
  }
}

void glViewport_native(Dart_NativeArguments arguments) {
  Dart_Handle x_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t x = 0;
  if (Dart_IsInteger(x_obj)) {
    HandleError(Dart_IntegerToInt64(x_obj, &x));
  }

  Dart_Handle y_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t y = 0;
  if (Dart_IsInteger(y_obj)) {
    HandleError(Dart_IntegerToInt64(y_obj, &y));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  glViewport(x, y, width, height);
}
